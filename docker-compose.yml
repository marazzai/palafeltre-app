services:
  db:
    image: postgres:16-alpine
    container_name: palafeltre-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - palafeltre

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: palafeltre-backend
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - STORAGE_PATH=/app/storage
      - CORS_ORIGINS=${CORS_ORIGINS}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@example.com}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-adminadmin}
      # In dev, force reset ensures you can always log in with the configured admin password on startup
      - FORCE_RESET_ADMIN_PASSWORD=${FORCE_RESET_ADMIN_PASSWORD:-true}
    volumes:
      - ./storage:/app/storage
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - palafeltre

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: palafeltre-frontend
    env_file:
      - .env
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - palafeltre

volumes:
  db_data:

networks:
  palafeltre:
    driver: bridge
